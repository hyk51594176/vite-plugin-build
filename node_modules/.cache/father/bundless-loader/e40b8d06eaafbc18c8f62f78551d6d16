{"value":{"content":"import { defineConfig } from 'father';\nimport { Service } from 'father/dist/service/service';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport { mergeConfig } from 'vite';\nconst ignores = ['src/vite-env.d.ts', 'src/demo/**', 'src/assets/**', 'src/main.tsx', 'src/App.tsx'];\nconst resolve = (...paths) => path.resolve(process.cwd(), ...paths);\nconst cssInJs = conf => {\n  const config = defineConfig(mergeConfig({\n    esm: {\n      ignores,\n      output: '/lib/esm'\n    },\n    cjs: {\n      ignores,\n      output: '/lib/cjs'\n    }\n  }, conf || {}));\n  let env;\n  return {\n    name: 'build',\n    apply(_, _env) {\n      env = _env;\n      return true;\n    },\n    async buildStart() {\n      if (env.command !== 'build') {\n        return;\n      }\n      const service = new Service();\n      const _resolveConfig = service.resolveConfig.bind(service);\n      service.resolveConfig = async function () {\n        const data = await _resolveConfig();\n        this.config = config;\n        return {\n          ...data,\n          config: {\n            ...data.defaultConfig,\n            ...config\n          }\n        };\n      };\n      await service.run({\n        name: 'build'\n      });\n      if (fs.existsSync(resolve('public'))) {\n        fs.copySync(resolve('public'), resolve('lib'));\n      }\n      if (fs.existsSync(resolve('src/index.less'))) {\n        fs.copyFileSync(resolve('src/index.less'), resolve('lib/index.less'));\n      }\n      fs.copyFileSync(resolve('package.json'), resolve('lib/package.json'));\n      console.log = () => {};\n      console.warn = () => {};\n    },\n    config() {\n      return {\n        build: {\n          emptyOutDir: false,\n          rollupOptions: {\n            output: {\n              dir: resolve('node_modules/.temp/dist')\n            }\n          },\n          lib: {\n            entry: 'src/vite-env.d.ts',\n            name: 'noop',\n            formats: []\n          }\n        }\n      };\n    }\n  };\n};\nexport default cssInJs;","options":{"ext":".js","declaration":true}},"type":"Object"}