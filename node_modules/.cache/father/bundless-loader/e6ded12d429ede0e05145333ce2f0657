{"value":{"content":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.tsx\nvar src_exports = {};\n__export(src_exports, {\n  default: () => src_default\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_father = require(\"father\");\nvar import_service = require(\"father/dist/service/service\");\nvar import_fs_extra = __toESM(require(\"fs-extra\"));\nvar import_path = __toESM(require(\"path\"));\nvar import_vite = require(\"vite\");\nvar ignores = [\n  \"src/vite-env.d.ts\",\n  \"src/demo/**\",\n  \"src/assets/**\",\n  \"src/main.tsx\",\n  \"src/App.tsx\"\n];\nvar resolve = (...paths) => import_path.default.resolve(process.cwd(), ...paths);\nvar cssInJs = (conf) => {\n  const config = (0, import_father.defineConfig)(\n    (0, import_vite.mergeConfig)(\n      {\n        esm: { ignores, output: \"/lib/esm\" },\n        cjs: { ignores, output: \"/lib/cjs\" }\n      },\n      conf || {}\n    )\n  );\n  let env;\n  return {\n    name: \"build\",\n    apply(_, _env) {\n      env = _env;\n      return true;\n    },\n    async buildStart() {\n      if (env.command !== \"build\") {\n        return;\n      }\n      const service = new import_service.Service();\n      const _resolveConfig = service.resolveConfig.bind(service);\n      service.resolveConfig = async function() {\n        const data = await _resolveConfig();\n        this.config = config;\n        return {\n          ...data,\n          config: { ...data.defaultConfig, ...config }\n        };\n      };\n      await service.run({\n        name: \"build\"\n      });\n      if (import_fs_extra.default.existsSync(resolve(\"public\"))) {\n        import_fs_extra.default.copySync(resolve(\"public\"), resolve(\"lib\"));\n      }\n      if (import_fs_extra.default.existsSync(resolve(\"src/index.less\"))) {\n        import_fs_extra.default.copyFileSync(resolve(\"src/index.less\"), resolve(\"lib/index.less\"));\n      }\n      import_fs_extra.default.copyFileSync(resolve(\"package.json\"), resolve(\"lib/package.json\"));\n      console.log = () => {\n      };\n      console.warn = () => {\n      };\n    },\n    config() {\n      return {\n        build: {\n          emptyOutDir: false,\n          rollupOptions: {\n            output: {\n              dir: resolve(\"node_modules/.temp/dist\")\n            }\n          },\n          lib: {\n            entry: \"src/vite-env.d.ts\",\n            name: \"noop\",\n            formats: []\n          }\n        }\n      };\n    }\n  };\n};\nvar src_default = cssInJs;\n","options":{"ext":".js"}},"type":"Object"}